package main.edu.uci.compiler.cfg;import main.edu.uci.compiler.model.BasicBlock;import main.edu.uci.compiler.model.Function;import main.edu.uci.compiler.model.Instruction;import java.io.*;import java.util.*;/** * Created by srikrishna on 2/2/17. */public class ControlFlowGraph {    BasicBlock startBasicBlock;    private Set<BasicBlock> endBasicBlocks;    public ControlFlowGraph(Set<BasicBlock> endBasicBlocks) {        this.endBasicBlocks = endBasicBlocks;    }    public void setStartBasicBlock(BasicBlock basicBlock) {        this.startBasicBlock = basicBlock;    }    public void addEndBasicBlock(BasicBlock endBasicBlock) {        this.endBasicBlocks.add(endBasicBlock);    }    public BasicBlock getStartBasicBlock() {        return startBasicBlock;    }    private void printBasicBlocks(BasicBlock basicBlock, List<String> digraph) {        if (basicBlock == null) return;        if (basicBlock.isVisited()) return;        basicBlock.setIsVisited();        digraph.add("BasicBlock" + basicBlock.getId()                + "[shape=\"box\", label=\"BasicBlock" + basicBlock.getId()                + "\n\n Type is " + basicBlock.getType() + "\n");        System.out.println("Basic Block " + basicBlock.getId() + " " + basicBlock.getType());        if (basicBlock.getInstructions().size() == 0) {            digraph.add("No Instructions in this basic block");        }        for (Instruction instruction : basicBlock.getInstructions()) {            System.out.println(instruction.getInstructionId() + ": " + instruction.toString());            digraph.add(instruction.getInstructionId() + ": " + instruction.toString());        }        System.out.println();        digraph.add("\"]");        for (BasicBlock children : basicBlock.getChildren()) printBasicBlocks(children, digraph);        for (Function function : basicBlock.getFunctionCalled()) {            if (function.isVisited()) continue;            function.setIsVisited();            printBasicBlocks(function.getFuncBasicBlock(), digraph);        }    }    private void printBasicBlockTree(LinkedList<BasicBlock> allBasicBlocks, List<String> digraph) {        for (BasicBlock b : allBasicBlocks) {            for (BasicBlock children : b.getChildren()) {                digraph.add("BasicBlock" + b.getId() + " -> BasicBlock" + children.getId());            }        }    }    private void generateCFG(BasicBlock startBasicBlock,                             LinkedList<BasicBlock> allBasicBlocks,                             List<String> digraph) {        digraph.add("digraph{");        printBasicBlockTree(allBasicBlocks, digraph);        printBasicBlocks(startBasicBlock, digraph);        digraph.add("}");    }    public void writeToCFGFile(String fileName,                               boolean isCP,                               boolean isCSE,                               BasicBlock startBasicBlock,                               LinkedList<BasicBlock> allBasicBlocks) {        List<String> digraph = new ArrayList<>();        generateCFG(startBasicBlock, allBasicBlocks, digraph);        Writer writer = null;        try {            String newFileName, cfgFileName;            String suffix = "CFG";            if (isCP) {                suffix = "CFG_CP";                if (isCSE) {                    suffix = "CFG_CP_CSE";                }            }            if (isCP) {                System.out.println("Generating CFG with Copy Propagation");                newFileName = fileName.substring(0, fileName.length() - 4) + suffix + ".dot";                cfgFileName = fileName.substring(0, fileName.length() - 4) + suffix + ".png";            } else {                System.out.println("Generating CFG without Copy Propagation");                newFileName = fileName.substring(0, fileName.length() - 4) + suffix + ".dot";                cfgFileName = fileName.substring(0, fileName.length() - 4) + suffix + ".png";            }            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(newFileName), "utf-8"));            for (String str : digraph) {                writer.write(str + "\n");            }            Runtime.getRuntime().exec("dot -Tpng " + newFileName + " -o " + cfgFileName);            System.out.println("Generated CFG at " + cfgFileName);        } catch (Exception ex) {            System.err.print("Error occured while writing CFG Data to file");        } finally {            try {                writer.close();            } catch (Exception ex) {                System.err.println("Error while closing writer and exiting");            }        }    }    public void printParentsForProgram(String fileName) {        System.out.println("Number of End Basic Blocks are " + this.endBasicBlocks.size());        List<String> parentDigraph = new ArrayList<>();        parentDigraph.add("digraph{");        for (BasicBlock basicBlock : this.endBasicBlocks) {            printParentsForEndBlock(basicBlock, parentDigraph);        }        parentDigraph.add("}");        ControlFlowGraph.generateFlow(fileName, parentDigraph, "parent");    }    private void printParentsForEndBlock(BasicBlock endBasicBlock, List<String> parentDigraph) {        Set<BasicBlock> visited = new HashSet<>();        Queue<BasicBlock> frontier = new LinkedList<>();        frontier.add(endBasicBlock);        while (!frontier.isEmpty()) {            BasicBlock currentBasicBlock = frontier.poll();            visited.add(currentBasicBlock);            if (currentBasicBlock.getParents().isEmpty()) {                parentDigraph.add("BasicBlock" + currentBasicBlock.getId());            }            for (BasicBlock parent : currentBasicBlock.getParents()) {                parentDigraph.add("BasicBlock" + parent.getId() + " -> BasicBlock" + currentBasicBlock.getId());                if (!visited.contains(parent)) {                    frontier.add(parent);                }            }        }    }    public static void generateFlow(String fileName, List<String> domDigraph, String type) {        Writer writer = null;        try {            String newFileName = fileName.substring(0, fileName.length() - 4) + type + ".dot";            String png = fileName.substring(0, fileName.length() - 4) + type + ".png";            writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(newFileName), "utf-8"));            for (String str : domDigraph) {                writer.write(str + "\n");            }            Runtime.getRuntime().exec("dot -Tpng " + newFileName + " -o " + png);            System.out.println("Generated " + type + " Flows " + png);        } catch (Exception ex) {            System.err.print("Error occured while writing " + type + " Data to file");        } finally {            try {                writer.close();            } catch (Exception ex) {                System.err.println("Error while closing writer and exiting");            }        }    }}